MAJOR PROJECTS
- Setup the concept of genomes throughout MABE with a comprehensive interface.
- Setup Organisms to be built from arbitrary brains and geneomes.
- Setup Web interface (for both graphical config and doing runs)
- Update config files in many ways, but especially:
    * Handling array types.
    * Allowing for mathematical expressions to be calculated at run-time based
      on current values.
    * Come up with a clean way to distinguish whether identifiers are config
      variables, organism traits, and population traits.
    * Printing longer (multi-line) comments.
- Setup organisms that need to be processed and ideally even processed
  asynchronusly and interactively.

- FIX evaluation system.  Instead of being limited to an evaluation phase,
  evaluator modules should be able to indicate on a trait that if it is needed
  to call them.  Ideally with a caching option as well...  For computationally
  intensive evaluations, this will allow them to only be called when needed.



== NEW VERSION OF MABEScript ==

Key ideas:
- All modules are written in MABEScript
- MABEScript can either be compiled to C++ (for compute speed) or interpreted (for ease)
- Modules will have a main function associated with them.
  For example, and instance the EliteSelect module 'elite_select' will can be called as
  elite_select(main_pop, 10) and would return the 10 selected individuals.

== Signals ==
Signals will be easy to name and to provide relevant information.
By default signals will only trigger modules listening to a particular population.

Signals are triggered with the "trigger" keyword.  For example:
  trigger "BeforeDeath" (position=target_org.GetPosition());

Modules specify what trigger names they are paying attention to.
  on "BeforeDeath" { ... actions that can use "position" as an input variable ... }

== Labels ==
Each module / function / config parameter works with labels in "name: value" format.

The "desc:" label is used for the description.
The "type:" label specified the type name something resolves to.
The "default:" label gives a default value.

Any other labels are allowed.  They are const Datum type (strings or values that can't be changed)