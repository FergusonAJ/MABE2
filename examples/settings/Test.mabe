random_seed = 0;                // Seed for random number generator; use 0 to base on time.
Population main_pop;            // Collection of organisms
Population next_pop;            // Collection of organisms
Population one_step_mutants;    // Collection of organisms
CommandLine cl {                // Handle basic I/O on the command line.
  target_pop = "main_pop";      // Which population should we print stats about?
}
Mutate mut {                    // Trigger mutations in organisms.
  target_pop = "main_pop";      // Which population should we mutate?
  skip = 0;                     // Number of orgs to exempt from mutating
}
EvalTest eval_nk {              // Evaluate bitstrings on an NK fitness lanscape. (test)
  target = "main_pop";          // Which population(s) should we evaluate?
  N = 100;                      // Number of bits required in output
  K = 3;                        // Number of bits used in each gene
  bits_trait = "bits";          // Which trait stores the bit sequence to evaluate?
  fitness_trait = "fitness";    // Which trait should we store NK fitness in?
}
SelectElite select_elite {      // Choose the top fitness organisms for replication.
  select_pop = "main_pop";      // Which population should we select parents from?
  birth_pop = "next_pop";       // Which population should births go into?
  top_count = 1;                // Number of top-fitness orgs to be replicated
  copy_count = 1;               // Number of copies to make of replicated organisms
  fitness_trait = "fitness";    // Which trait provides the fitness value to use?
}
SelectTournament select_tourny { // Select the top fitness organisms from random subgroups for replication.
  select_pop = "main_pop";      // Which population should we select parents from?
  birth_pop = "next_pop";       // Which population should births go into?
  tournament_size = 7;          // Number of orgs in each tournament
  num_tournaments = 199;          // Number of tournaments to run
  fitness_trait = "fitness";    // Which trait provides the fitness value to use?
}
GrowthPlacement place_next {    // Always appened births to the end of a population.
  target_pop = "main_pop";      // Population to manage.
}
GrowthPlacement place_next {    // Always appened births to the end of a population.
  target_pop = "next_pop";      // Population to manage.
}
GrowthPlacement place_next {    // Always appened births to the end of a population.
  target_pop = "one_step_mutants";      // Population to manage.
}
MovePopulation sync_gen {       // Move organisms from one populaiton to another.
  from_pop = "next_pop";        // Population to move organisms from.
  to_pop = "main_pop";          // Population to move organisms into.
  reset_to = 1;                 // Should we erase organisms at the destination?
}
BitsOrg bits_org {              // Organism consisting of a series of N bits.
  output_name = "bits";         // Name of variable to contain bit sequence.
  N = 100;                      // Number of bits in organism
}
OneStepMutants mut_gen {
  source_pop = "main_pop";
  mutant_pop = "one_step_mutants";
  update_step = 10;
  min_mutation_idx = 0;
  max_mutation_idx = 100;
}
DumpPopulation dump_one_step{
  pop = "one_step_mutants";
  update_step = 10;
}
EmptyPopulation empty_one_step{
  pop = "one_step_mutants";
  update_step = 10;
}

@start(0) print("random_seed = ", random_seed, "\n");
@start(0) inject("bits_org", "main_pop", 200);
@update(1000) exit();
