random_seed = 0;                // Seed for random number generator; use 0 to base on time.
Var pop_size = 128;             // Number of organisms to evaluate in the population.
Var num_bits = 10;              // Number of bits in each organism (and the NK landscape)
Var num_gens = 1000;

Var starting_index = 0;
Var optimal_fitness = 0;

Var index = 0;
Var bitstring = "";

Population main_pop;            // Main population for managing candidate solutions.
Population next_pop;            // Temp. population while constructing the next generation.

BitsOrg bits_org {              // Organism consisting of a series of N bits.
  output_name = "bits";         // Name of variable to contain bit sequence.
  N = num_bits;                 // Number of bits in organism
  mut_prob = 0.01;              // Probability of each bit mutating on reproduction.
  init_random = 1;              // Should we randomize ancestor?  (0 = all zeros)
};

EvalNK eval_nk {                // Evaluate bitstrings on an NK fitness lanscape.
  N = num_bits;                 // Number of bits required in output
  K = 3;                        // Number of bits used in each gene
  bits_trait = "bits";          // Which trait stores the bit sequence to evaluate?
  fitness_trait = "fitness";    // Which trait should we store NK fitness in?
};

SelectElite elite {             // Choose the top fitness organisms for replication.
  top_count = 5;                // Number of top-fitness orgs to be replicated
  fitness_fun = "fitness";      // Which trait provides the fitness value to use?
};

SelectTournament tournament {   // Select the top fitness organisms from random subgroups for replication.
  tournament_size = 4;          // Number of orgs in each tournament
  fitness_fun = "fitness";      // Which trait provides the fitness value to use?
};

StringUtils str_utils;

DataFile fit_file { filename="fitness.csv"; };
fit_file.ADD_COLUMN( "Average Fitness", "main_pop.CALC_MEAN('fitness')" );
fit_file.ADD_COLUMN( "Maximum Fitness", "main_pop.CALC_MAX('fitness')" );
fit_file.ADD_COLUMN( "Dominant Fitness", "main_pop.CALC_MODE('fitness')" );

DataFile max_file { filename="max_org.csv"; };
OrgList best_org;
max_file.ADD_SETUP( "best_org = main_pop.FIND_MAX('fitness')" );
max_file.ADD_COLUMN( "Fitness", "best_org.TRAIT('fitness')" );
max_file.ADD_COLUMN( "Genome", "best_org.TRAIT('bits')" );

//DataFile landscape_file { filename="landscape.csv"; };
//landscape_file.ADD_COLUMN( "index", "index");
//landscape_file.ADD_COLUMN( "bitstring", "bitstring");
//landscape_file.ADD_COLUMN( "fitness", "main_pop.CALC_MAX('fitness')" );


@START() {
  PRINT("random_seed = ", random_seed, "\n");  // Print seed at run start.
  Population empty_pop;
  eval_nk.RESET_WITH_SEED(17);
  //main_pop.REPLACE_WITH(empty_pop);
  PRINT("Optimal index: ", eval_nk.GET_OPTIMAL());
  optimal_fitness = eval_nk.GET_OPTIMAL_FITNESS();
  PRINT("Optimal fitness: ", optimal_fitness);
  PRINT(""); // Empty line as a spacer
  //index = 0;
  //WHILE(index < (2**num_bits)){
  //  bitstring = str_utils.CONVERT_TO_BITSTRING(index, num_bits);
  //  main_pop.INJECT("bits_org", 1);
  //  main_pop.SET_GENOME(0, bitstring);
  //  Var score = eval_nk.EVAL(main_pop);
  //  landscape_file.WRITE();
  //  //PRINT(index, " -> ",  bitstring, ": ", score);
  //  main_pop.REPLACE_WITH(empty_pop);
  //  index = index + 1;
  //}
  //main_pop.INJECT("bits_org", 1);
  //main_pop.SET_GENOME(0, "11111111");//11111111111111111");
  //eval_nk.EVAL(main_pop);
  //PRINT(main_pop.CALC_MEAN("fitness"));
  bitstring = str_utils.CONVERT_TO_BITSTRING(starting_index, num_bits);
  main_pop.REPLACE_WITH(empty_pop);
  main_pop.INJECT("bits_org", pop_size);       // Inject starting population.
  WHILE(index < pop_size){
    main_pop.SET_GENOME(index, bitstring);
    index = index + 1;
  }
}

// Actions to perform every update.

// @UPDATE(Var ud IN [100:100]) OrgList altruists = main_pop.FILTER("altruism > 0");
// @BEFOREDIVIDE(OrgList parent IN altruists) PRINT("Altruist Birth!");

Var cur_max = 0; 
Var old_max = 0; 

@UPDATE(Var ud) {
  eval_nk.EVAL(main_pop);
  cur_max = main_pop.CALC_MAX("fitness");
  IF(cur_max != old_max){
    PRINT("[", ud, "] ", old_max, " -> ", cur_max);
    old_max = cur_max;
  }
  
  IF(ud % 1000 == 0){
    Var mode_fit = main_pop.CALC_MODE("fitness");
    OrgList list_less = main_pop.FILTER("fitness < ${mode_fit}");
    OrgList list_equ  = main_pop.FILTER("fitness == ${mode_fit}");
    OrgList list_gtr  = main_pop.FILTER("fitness > ${mode_fit}");
    PRINT("UD:", GET_UPDATE(),
          "  MainPopSize=", main_pop.SIZE(),
          "  AveFitness=", main_pop.CALC_MEAN("fitness"),
          "  MaxFitness=", main_pop.CALC_MAX("fitness"),
          "  ModeFitness=", mode_fit,
          "\nMODE_LESS=", list_less.SIZE(),
          "  MODE_EQU=", list_equ.SIZE(),
          "  MODE_GTR=", list_gtr.SIZE()
         );
  }
  fit_file.WRITE();
  max_file.WRITE();

  IF (ud == num_gens){
    IF (main_pop.CALC_MAX("fitness") == optimal_fitness) { 
      PRINT("Optimal reached!");
    }
    EXIT();
  }

  OrgList elite_offspring = elite.SELECT(main_pop, next_pop, 1);

  Var num_tournaments = pop_size - elite_offspring.SIZE();  // Calc number of tournaments to run
  OrgList tourny_offspring = tournament.SELECT(main_pop, next_pop, num_tournaments);

  main_pop.REPLACE_WITH(next_pop);

}

