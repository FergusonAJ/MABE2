random_seed = 1;                // Seed for random number generator; use 0 to base on time.
Population main_pop;            // Collection of organisms
Population next_pop;            // Collection of organisms
Value pop_size = 20;           // Local value variable.
Value max_gens = 10;            // Local value variable.
CommandLine cl {                // Handle basic I/O on the command line.
  format = "";                  // Column format to use in the file.
  target = "main_pop";          // Which population(s) should we print from?
}
GrowthPlacement place_next {    // Always appened births to the end of a population.
  target = "main_pop";          // Population(s) to manage.
}
AnnotatePlacement pos_annotater { // Store org's position as trait on placement.
  target = "main_pop";          // Population(s) to manage.
  pos_trait = "org_pos";        // Name of trait that will hold organism's position
}
SchedulerProbabilistic scheduler { // Rations out updates to organisms based on a specified attribute, using a method akin to roulette wheel selection.
  pop = "main_pop";             // Which population should we select parents from?
  avg_updates = 30;             // How many updates should organism receive on average?
  trait = "merit";              // Which trait provides the fitness value to use?
}
VirtualCPU_Inst_Nop inst_lib_nop { // Nop instructions for VirtualCPUOrg
  target_pop = "main_pop";      // Population(s) to manage.
}
VirtualCPU_Inst_Math inst_lib_math { // Math instructions for VirtualCPUOrg
  target_pop = "main_pop";      // Population(s) to manage.
}
VirtualCPU_Inst_Input inst_lib_input { // Input instructions for VirtualCPUOrg
  target_pop = "main_pop";      // Population(s) to manage.
  input_name = "input";         // Name of variable to store inputs
  input_idx_name = "input_idx"; // Index of next input to be loaded
}
VirtualCPU_Inst_Flow inst_lib_flow { // Flow control instructions for VirtualCPUOrg
  target_pop = "main_pop";      // Population(s) to manage.
}
VirtualCPU_Inst_Manipulation inst_lib_manip { // Manipulation instructions for VirtualCPUOrg
  target_pop = "main_pop";      // Population(s) to manage.
}
VirtualCPU_Inst_Replication inst_lib_repl { // Replication instructions for VirtualCPUOrg
  target_pop = "main_pop";      // Population(s) to manage.
  pos_trait = "org_pos";        // Name of trait that holds organism's position
}
VirtualCPUOrg avida_org {       // Organism consisting of Avida instructions.
  mut_prob = 0.01;              // Probability of each instruction mutating on reproduction.
  N = 0;                        // Initial number of instructions in genome
  init_random = 0;              // Should we randomize ancestor?  (0 = "blank" default)
  eval_time = 200;              // How many CPU cycles should we give organisms to run?
  input_name = "input";         // Name of variable to load inputs from.
  output_name = "output";       // Name of variable to output results.
}

@start(0) print("random_seed = ", random_seed, "\n");
@start(0) inject("avida_org", "main_pop", pop_size);
@update(max_gens) exit();
