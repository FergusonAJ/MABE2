random_seed = 1;                // Seed for random number generator; use 0 to base on time.
Population main_pop;            // Collection of organisms
Population next_pop;            // Collection of organisms
Value pop_size = 200;           // Local value variable.
Value max_gens = 10;
CommandLine cl {                // Handle basic I/O on the command line.
  //format = "score:max,score:mean";// Column format to use in the file.
  format = "";// Column format to use in the file.
  target = "main_pop";          // Which population(s) should we print from?
}
//FileOutput output_mod {         // Output collected data into a specified file.
//  filename = "output.csv";      // Name of file for output data.
//  format = "score:max,score:mean";// Column format to use in the file.
//  target = "main_pop";          // Which population(s) should we print from?
//  output_updates = "0:1";       // Which updates should we output data?
//}
GrowthPlacement place_next {    // Always appened births to the end of a population.
  target = "main_pop"; // Population(s) to manage.
}
VirtualCPU_Inst_Math inst_lib_math { // Math instructions for VirtualCPUOrg
  target_pop = "main_pop";      // Population(s) to manage.
}
VirtualCPU_Inst_Input inst_lib_input { // Input instructions for VirtualCPUOrg
  target_pop = "main_pop";      // Population(s) to manage.
  input_name = "input";         // Name of variable to store inputs
  input_idx_name = "input_idx"; // Index of next input to be loaded
}
VirtualCPUOrg avida_org {       // Organism consisting of Avida instructions.
  mut_prob = 0.01;              // Probability of each instruction mutating on reproduction.
  N = 50;                       // Initial number of instructions in genome
  init_random = 1;              // Should we randomize ancestor?  (0 = "blank" default)
  eval_time = 200;              // How many CPU cycles should we give organisms to run?
  input_name = "input";         // Name of variable to load inputs from.
  output_name = "output";       // Name of variable to output results.
}

@start(0) print("random_seed = ", random_seed, "\n");
@start(0) inject("avida_org", "main_pop", pop_size);
@update(max_gens) exit();
