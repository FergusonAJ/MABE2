random_seed = 1;                // Seed for random number generator; use 0 to base on time.
Var num_vals = 100;
Var pop_size = 512;
Var num_gens = 50000;
Var print_step = 100;           // Interval for printing...

Population main_pop;
Population next_pop;

ValsOrg vals_org {              // Organism consisting of a series of N floating-point values.
  N = num_vals;                 // Number of values in organism
  mut_prob = 0.007;             // Probability of each value mutating on reproduction.
  mut_size = 1.0;               // Standard deviation on size of mutations.
  min_value = 0;                // Lower limit for value fields.
  max_value = 100;              // Upper limit for value fields.
  lower_bound = "clamp";        // How should the lower limit be enforced?
                                // - "no_limit": Allow values to be arbirarily low.
                                // - "clamp": Reduce too-low values to min_value.
                                // - "wrap": Make low values loop around to maximum.
                                // - "rebound": Make low values 'bounce' back up.
  upper_bound = "rebound";      // How should the upper limit be enforced?
                                // - "no_limit": Allow values to be arbirarily high.
                                // - "clamp": Reduce too-high values to max_value.
                                // - "wrap": Make high values loop around to minimum.
                                // - "rebound": Make high values 'bounce' back down.
  output_name = "vals";         // Name of variable to contain set of values.
  total_name = "total";         // Name of variable to contain total of all values.
};

EvalDiagnostic diagnostics {    // Evaluate set of values with a specified diagnostic problem.
  vals_trait = "vals";          // Which trait stores the values to evaluate?
  scores_trait = "scores";      // Which trait should we store revised scores in?
  total_trait = "fitness";      // Which trait should we store the total score in?
  diagnostic = "explore";       // Which Diagnostic should we use?
                                // "exploit": Fitness = sum of all values
                                // "struct_exploit": Fitness = sum of descending values from start
                                // "explore": Fitness = sum of descending values from max
                                // "diversity": Fitness = max value minus all others
                                // "weak_diversity": Fitness = max value
};

SelectRoulette select_r {       // Choose the top fitness organisms for replication.
  fitness_fun = "fitness";      // Which trait provides the fitness value to use?
};

SelectElite select_e {          // Choose the top fitness organisms for replication.
  fitness_fun = "fitness";      // Which trait provides the fitness value to use?
  top_count = pop_size/2;       // Number of top-fitness orgs to be replicated
};

SelectTournament select_t {     // Replicate top fitness organisms from random subgroups.
  tournament_size = 7;          // Number of orgs in each tournament
  fitness_fun = "fitness";      // Which trait provides the fitness value to use?
};

SelectLexicase select_l {       // Shuffle traits each time an organism is chose for replication.
  fitness_traits = "scores";    // Which traits provide the fitness values to use?
  epsilon = 0.0;                // Range from max value to be preserved? (fraction of max)
  num_births = pop_size;        // Number of offspring organisms to produce
};

GrowthPlacement place_next {    // Always append births to the end of a population.
  target = "main_pop,next_pop"; // Population(s) to manage.
}
MovePopulation sync_gen {       // Move organisms from one population to another.
  from_pop = "next_pop";        // Population to move organisms from.
  to_pop = "main_pop";          // Population to move organisms into.
  reset_to = 1;                 // Should we erase organisms at the destination?
}

@start() PRINT("random_seed = ", random_seed, "\n");
@start() main_pop.INJECT("vals_org", pop_size);
@update(num_gens) EXIT();

Value best_id;
@update(10, 10) {
  best_id = TRAIT_VALUE("main_pop", "fitness:max_id");
  WRITE("output.csv", "main_pop", "fitness:max,fitness:max_id,fitness:mean,vals:${best_id},scores:${best_id}");
}

@update(5) PRINT("Popsize = ", SIZE("main_pop"), ", ", SIZE("next_pop"), "\n");

// @update(10, 10) output("output.csv", "main_pop", "fitness:max,fitness:max_id,fitness:mean,genome:0");
// @update(10, 10) output("output.csv", "main_pop", "fitness:max,fitness:max_id,fitness:mean,genome:$fitness:max_id");
// @update(10, 10) output("output.csv", "main_pop", "fitness:max,fitness:max_id,fitness:mean,genome:$1");
// @update(10, 10) output("output.csv", "main_pop", "fitness:max,best=fitness:max_id,fitness:mean,genome:$best");
// @update(10, 10) output("output.csv", "main_pop", "fitness:max,fitness:mean,genome:$best|best=fitness:max_id");
