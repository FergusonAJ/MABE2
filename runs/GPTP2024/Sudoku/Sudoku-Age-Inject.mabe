random_seed = 0;                // Seed for random number generator; use 0 to base on time.

Var pop_size = 1000;            // Number of organisms to evaluate in the population.
Var max_ud = 10000;             // Number of generations to continue run for.
Var treatment = "Sudoku-Age-Inject"; // Name of this group of run.

Var elite_count = 0;
Var print_step = 100;           // Interval for printing...
Var inject_step = 1000;         // Frequency of injecting new random organisms.
Var inject_count = 200;         // Number of organisms to inject at each interval.

Population main_pop;            // Main population for managing candidate solutions.
Population next_pop;            // Temp. population while constructing the next generation.

StatesOrg states_org {          // Organism consisting of a series of N bits.
  D = 10;                       // How many states are possible per site?
  N = 81;                       // Number of values in organism
  change_type = "uniform";      // What should a point mutation do?
                                //  null: Do not allow mutations; issue warning if attempted.
                                //  ring: State changes add or subtract one, looping
                                //  uniform: Change to another state with equal probability.
  genome_name = "states";       // Name of variable to contain set of values.
  init_random = 0;              // Should we randomize ancestor?  (0 = all 0.0)
  mut_prob = 0.015;             // Probability of each value mutating on reproduction.
};

TrackAncestor track_anc {
  inject_time_trait = "inject_time"; // Time this lineage was first injected into the population.
  clade_id_trait = "clade_id";  // Unique id for all members of this clade.
};

EvalSudoku eval_sudoku {           // Evaluate bitstrings on an NK fitness landscape.
  states_trait = "states";         // Trait name for Starting states for Sudoku board
  move_counts_trait = "move_counts"; // Trait name for How many times is a move type needed (for each move)?
  score_trait = "score";           // Trait name for Overall score for this sudoku board
  solvable_trait = "solvable";     // Trait name for Is this game solvable? 0/1
  puz_variety_trait = "puz_variety"; // Trait name for How many different types of moves are used in solution?
  puz_empty_trait = "puz_empty";   // Trait name for Empty cell count at start of a SOLVABLE game (0=unsolvable)
  puz_length_trait = "puz_length"; // Trait name for How long is the solving profile for this game?
};

SelectElite elite {             // Choose the top fitness organisms for replication.
  top_count = 5;                // Number of top-fitness orgs to be replicated
  fitness_fun = "score";        // Which trait provides the fitness value to use?
};

SelectTournament tournament {   // Select the top fitness organisms from random subgroups for replication.
  tournament_size = 7;          // Number of orgs in each tournament
  fitness_fun = "score";      // Which trait provides the fitness value to use?
};

SelectLexicase select_lex {       // Shuffle traits each time an organism is chose for replication.
  fitness_traits = "move_counts,score,solvable,puz_variety,puz_empty,puz_length,puz_match";    // Which traits provide the fitness values to use?
  epsilon = 0.0;                // Range from max value to be preserved? (fraction of max)
  sample_traits = 0;            // How many traits should be sampled each generation? (0 = off)

  major_trait = "inject_time";
  major_range = 10;
};


DataFile fit_file { filename="score.csv"; };
fit_file.ADD_COLUMN( "Generation", "GET_UPDATE()");
fit_file.ADD_COLUMN( "Average Score", "main_pop.CALC_MEAN('score')" );
fit_file.ADD_COLUMN( "Maximum Score", "main_pop.CALC_MAX('score')" );
fit_file.ADD_COLUMN( "Dominant Score", "main_pop.CALC_MODE('score')" );

DataFile max_file { filename="max_org.csv"; };
OrgList best_org;
max_file.ADD_SETUP( "best_org = main_pop.FIND_MAX('score')" );
max_file.ADD_COLUMN( "Generation", "GET_UPDATE()");
max_file.ADD_COLUMN( "Score", "best_org.TRAIT('score')" );
max_file.ADD_COLUMN( "Solvable", "best_org.TRAIT('solvable')" );
max_file.ADD_COLUMN( "Variety", "best_org.TRAIT('puz_variety')" );
max_file.ADD_COLUMN( "EmptyCells", "best_org.TRAIT('puz_empty')" );
max_file.ADD_COLUMN( "PuzzleLength", "best_org.TRAIT('puz_length')" );
max_file.ADD_COLUMN( "PuzzleMatch", "best_org.TRAIT('puz_match')" );
max_file.ADD_COLUMN( "Genome", "best_org.TRAIT('states')" );
max_file.ADD_COLUMN( "birth", "best_org.TRAIT('inject_time')" );


@START() {
  PRINT("Beginning ", treatment, "!\nMain config options:");
  PRINT(" Mut Probability:  ", states_org.mut_prob);
  PRINT(" Population size:  ", pop_size);
  PRINT(" Inject Step:      ", inject_step);
  PRINT(" Inject Count:     ", inject_count);
  PRINT(" Random seed:      ", random_seed, "\n");
  PRINT(" Num Generations:  ", max_ud, "\n");
 
  main_pop.INJECT("states_org", pop_size);       // Inject starting population.
}

// Actions to perform every update.

@UPDATE(Var ud) {
  eval_sudoku.EVAL(main_pop);

  IF (ud % print_step == 0) {
    Var mode_score = main_pop.CALC_MODE("score");
    PRINT("UD:", GET_UPDATE(),
          "  MainPopSize=", main_pop.SIZE(),
          "  AveScore=", main_pop.CALC_MEAN("score"),
          "  MaxScore=", main_pop.CALC_MAX("score"),
          "  ModeScore=", mode_score,
          "\nAny Solvable=", main_pop.CALC_MAX("solvable"),
          "  Max PuzVariety=", main_pop.CALC_MAX("puz_variety"),
          "  Max PuzLength=", main_pop.CALC_MAX("puz_length"),
          "  Max Empty=", main_pop.CALC_MAX("puz_empty"),
	  "  Match=", main_pop.CALC_MAX("puz_match")
        );
    fit_file.WRITE();
    max_file.WRITE();
  }

  IF (ud == max_ud) {
    best_org = main_pop.FIND_MAX('score');
    eval_sudoku.PRINT(best_org);
    EXIT();
  }

  IF (ud % inject_step == 0) {
    next_pop.INJECT("states_org", inject_count);
  }
  elite.SELECT(main_pop, next_pop, elite_count);

  Var num_tournaments = pop_size - next_pop.SIZE();  // Calc number of tournaments to run
  select_lex.SELECT(main_pop, next_pop, num_tournaments);


  main_pop.REPLACE_WITH(next_pop);
}
